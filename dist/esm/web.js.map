{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAC5C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAyB;QACrC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACjC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,OAAuC;QAC9D,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QAC5C,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,0BAA0B;QAC9B,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;QAChE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,+BAA+B;QACnC,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;QACrE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACjC,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC;QAC5C,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QACpD,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC5B,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC5B,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,OAAO,CAAC;QAClG,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAE5C,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type { NativeHelperPlugin } from './definitions';\r\n\r\nexport class NativeHelperWeb extends WebPlugin implements NativeHelperPlugin {\r\n  async echo(options: { value: string }): Promise<{ value: string }> {\r\n    console.log('ECHO', options);\r\n    return options;\r\n  }\r\n\r\n  async toastMe(options: { text: string }): Promise<void> {\r\n    console.log('toastMe:', options);\r\n    alert(options.text);\r\n  }\r\n\r\n  async moveToBackground(): Promise<void> {\r\n    console.log('moveToBackground: Not available on web');\r\n  }\r\n\r\n  async startClipService(): Promise<void> {\r\n    console.log('startClipService: Not available on web');\r\n  }\r\n\r\n  async stopClipService(): Promise<void> {\r\n    console.log('stopClipService: Not available on web');\r\n  }\r\n\r\n  async storeInSharedPrefs(options: { key: string; value: string }): Promise<void> {\r\n    console.log('storeInSharedPrefs:', options);\r\n    localStorage.setItem(options.key, options.value);\r\n  }\r\n\r\n  async getOverlayPermissionStatus(): Promise<{ result: boolean }> {\r\n    console.log('getOverlayPermissionStatus: Not available on web');\r\n    return { result: false };\r\n  }\r\n\r\n  async getNotificationPermissionStatus(): Promise<{ result: boolean }> {\r\n    console.log('getNotificationPermissionStatus: Not available on web');\r\n    return { result: false };\r\n  }\r\n\r\n  async getSystemLanguage(): Promise<{ value: string }> {\r\n    console.log('getSystemLanguage');\r\n    const language = navigator.language || 'en';\r\n    return { value: language };\r\n  }\r\n\r\n  async getVersionName(): Promise<{ versionName: string }> {\r\n    console.log('getVersionName: Not available on web');\r\n    return { versionName: 'web' };\r\n  }\r\n\r\n  async requestOverlayPermission(): Promise<void> {\r\n    console.log('requestOverlayPermission: Not available on web');\r\n  }\r\n\r\n  async goToNotificationSettings(): Promise<void> {\r\n    console.log('goToNotificationSettings: Not available on web');\r\n  }\r\n\r\n  async checkTheme(): Promise<{ theme: string }> {\r\n    const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    const theme = isDarkMode ? 'dark' : 'light';\r\n\r\n    return { theme };\r\n  }\r\n}\r\n"]}